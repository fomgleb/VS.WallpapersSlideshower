<Window x:Class="WallpapersSlideshower.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WallpapersSlideshower"
        xmlns:dd="urn:gong-wpf-dragdrop"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:c="clr-namespace:WallpapersSlideshower.Converters"
        xmlns:vm="clr-namespace:WallpapersSlideshower.ViewModels"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        d:DataContext="{d:DesignInstance Type=vm:MainWindowViewModel}"
        mc:Ignorable="d"
        Title="Wallpapers Slideshower" Height="500" Width="1048"
        Icon="/Resources/Icons/wallpaper-svgrepo-com.ico"
        WindowState="{Binding WindowState, Mode=TwoWay}"
        Topmost="True">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Styles/Buttons.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <c:NegatingConverter x:Key="negatingConverter"/>
            <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
        </ResourceDictionary>
    </Window.Resources>
    <Window.Visibility>
        <Binding Path="WindowVisibility" Mode="TwoWay" Converter="{StaticResource booleanToVisibilityConverter}"/>
    </Window.Visibility>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="StateChanged">
            <i:InvokeCommandAction Command="{Binding Path=OnWindowStateChangedCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        
        <tb:TaskbarIcon IconSource="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Icon}"
                        ToolTipText="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=Title}"
                        LeftClickCommand="{Binding ChangeWindowVisibilityCommand}"
                        LeftClickCommandParameter="{Binding Path=WindowVisibility, Converter={StaticResource negatingConverter}}"
                        NoLeftClickDelay="True">
        </tb:TaskbarIcon>
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <StackPanel Orientation="Vertical" Grid.Row="0">
                    <StackPanel Orientation="Horizontal">
                        <Button Command="{Binding SelectFolderCommand}" 
                                Content="Select Folder"
                                ToolTipService.InitialShowDelay="500">
                            <Button.ToolTip>
                                <ToolTip Content="Select a folder with wallpapers"/>
                            </Button.ToolTip>
                        </Button>
                        <CheckBox Template="{DynamicResource myCheckBoxTemplate}"
                                  Content="Random"
                                  IsChecked="{Binding RandomIsEnabled, Mode=TwoWay}"
                                  Command="{Binding ChangeRandomEnabledCommand}"
                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}"
                                  ToolTipService.InitialShowDelay="500">
                            <CheckBox.ToolTip>
                                <ToolTip Content="If this is true, the sequence will be random"/>
                            </CheckBox.ToolTip>
                        </CheckBox>
                        <ToggleButton Command="{Binding ChangeSlideshowEnabledCommand}"
                                      CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Mode=Self}}"
                                      Width="50"
                                      MinWidth="50"
                                      Height="23"
                                      Template="{DynamicResource myToggleButtonTemplate}"
                                      ToolTipService.InitialShowDelay="500">
                            <ToggleButton.ToolTip>
                                <ToolTip Content="This toggle button enables wallpapers slide show (After waking up from sleep mode, the wallpaper will change)"/>
                            </ToggleButton.ToolTip>
                        </ToggleButton>
                    </StackPanel>
                    <!--<StackPanel Orientation="Horizontal">
                        <TextBlock Text="Run program at startup:"
                                   VerticalAlignment="Center"/>
                        <ToggleButton Template="{DynamicResource myToggleButtonTemplate}"
                                      Width="50"
                                      MinWidth="50"
                                      Height="23">
                            
                        </ToggleButton>
                    </StackPanel>-->
                </StackPanel>
                <ListView dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True"
                          Grid.Row="1"
                          ScrollViewer.CanContentScroll="False"
                          ItemsSource="{Binding WallpapersViewModels}" Height="auto"
                          SelectedItem="{Binding SelectedWallpaperViewModel}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" ScrollViewer.CanContentScroll="True">
                                <Image Width="100" Height="75" Source="{Binding IconImageSource}"/>
                                <TextBlock Text="{Binding FileName}" Margin="5,0,0,0" VerticalAlignment="Center"/>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListView>
            </Grid>
            <GridSplitter Width="3" Grid.RowSpan="2" Grid.Column="1" ShowsPreview="False" HorizontalAlignment="Center"
                          VerticalAlignment="Stretch"/>
            <Image Grid.Column="2"
               Source="{Binding SelectedWallpaperViewModel.PathToImage}"/>
        </Grid>
        <StatusBar DockPanel.Dock="Bottom" Height="20" VerticalAlignment="Bottom" Grid.Row="1">
            <StatusBarItem>
                <TextBlock Grid.Row="2" Text="{Binding WallpapersViewModels.Count, StringFormat=Number: {0}}"/>
            </StatusBarItem>
            <StatusBarItem Margin="10,0,0,0">
                <TextBlock Text="{Binding PathToFolder, StringFormat=Path to folder: {0}}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
